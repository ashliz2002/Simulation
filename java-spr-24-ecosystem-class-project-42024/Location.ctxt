#BlueJ class context
comment0.target=Location
comment0.text=\r\n\ Represent\ a\ location\ in\ a\ rectangular\ grid.\r\n\ \r\n\ @author\ Brice\ S\ -\ fire\ behavior\r\n\ @version\ 2024.00\r\n\ Reference\ David\ J.\ Barnes\ and\ Michael\ K\u00F6lling,\ version\ 2016.02.29\r\n
comment1.params=row\ col
comment1.target=Location(int,\ int)
comment1.text=\r\n\ Represent\ a\ row\ and\ column.\r\n\ @param\ row\ The\ row.\r\n\ @param\ col\ The\ column.\r\n
comment10.params=numberOfPlantsAsIndex\ newPlant
comment10.target=void\ addPlant(java.lang.Integer,\ Plant)
comment10.text=\r\n\ @return\ Update\ the\ array\ of\ plants\ in\ this\ location.\r\n
comment11.params=
comment11.target=int\ getNumberOfPlants()
comment11.text=\r\n\ @return\ The\ count\ of\ plants\ in\ that\ location.\r\n
comment12.params=
comment12.target=int\ incrementNumberOfPlants()
comment12.text=\r\n\ @return\ The\ updated\ count\ of\ plants\ in\ that\ location.\r\n
comment13.params=
comment13.target=int\ decrementNumberOfPlants()
comment13.text=\r\n\ @return\ The\ updated\ count\ of\ plants\ in\ that\ location.\r\n
comment14.params=
comment14.target=void\ setOnFire()
comment14.text=\r\n\ Set\ the\ location\ on\ fire.\r\n
comment15.params=
comment15.target=boolean\ isOnFire()
comment15.text=\r\n\ @return\ Determine\ if\ a\ location\ is\ on\ fire\r\n
comment16.params=neighbor
comment16.target=void\ addNeighbor(Location)
comment16.text=\r\n\ Add\ neighboring\ location.\r\n\ @param\ neighbor\ The\ neighboring\ location\ to\ add.\r\n
comment17.params=
comment17.target=void\ spreadFire()
comment17.text=\r\n\ Spread\ fire\ to\ neighboring\ locations.\r\n
comment2.params=obj
comment2.target=boolean\ equals(java.lang.Object)
comment2.text=\r\n\ Implement\ content\ equality.\r\n
comment3.params=
comment3.target=java.lang.String\ toString()
comment3.text=\r\n\ Return\ a\ string\ of\ the\ form\ row,column\r\n\ @return\ A\ string\ representation\ of\ the\ location.\r\n
comment4.params=
comment4.target=int\ hashCode()
comment4.text=\r\n\ Use\ the\ top\ 16\ bits\ for\ the\ row\ value\ and\ the\ bottom\ for\r\n\ the\ column.\ Except\ for\ very\ big\ grids,\ this\ should\ give\ a\r\n\ unique\ hash\ code\ for\ each\ (row,\ col)\ pair.\r\n\ @return\ A\ hashcode\ for\ the\ location.\r\n
comment5.params=
comment5.target=int\ getRow()
comment5.text=\r\n\ @return\ The\ row.\r\n
comment6.params=
comment6.target=int\ getCol()
comment6.text=\r\n\ @return\ The\ column.\r\n
comment7.params=
comment7.target=Plant[]\ getPlants()
comment7.text=\r\n\ @return\ The\ current\ array\ of\ plants\ in\ that\ location.\r\n
comment8.params=
comment8.target=Plant\ getCurrentPlant()
comment8.text=\r\n\ @return\ The\ current\ plant\ in\ the\ current\ array\ of\ plants\ in\ that\ location.\r\n
comment9.params=numberOfPlants\ newPlant
comment9.target=void\ removeCurrentPlant(java.lang.Integer,\ Plant)
comment9.text=\r\n\ @return\ Update\ the\ array\ of\ plants\ in\ this\ location.\r\n
numComments=18
